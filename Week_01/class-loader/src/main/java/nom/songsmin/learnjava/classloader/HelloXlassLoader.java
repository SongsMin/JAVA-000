/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nom.songsmin.learnjava.classloader;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class HelloXlassLoader extends ClassLoader {
    private final File xlassFile;

    public HelloXlassLoader(File xlassFile) {
        this.xlassFile = xlassFile;
    }

    public static void main(String[] args) {
        String fileName = HelloXlassLoader.class.getResource("/Hello.xlass").getPath();
        File xlassFile = new File(fileName);
        ClassLoader classLoader = new HelloXlassLoader(xlassFile);
        try {
            Class<?> helloClass = classLoader.loadClass("Hello");
            Method helloMethod = helloClass.getDeclaredMethod("hello");
            helloMethod.setAccessible(true);
            helloMethod.invoke(helloClass.newInstance());
        } catch (ClassNotFoundException | NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        byte[] content = getBytes();
        return defineClass(name, content, 0, content.length);
    }

    byte[] getBytes() {
        assert (xlassFile.length() <= Integer.MAX_VALUE);
        int len = (int) xlassFile.length();
        byte[] content;
        final int STEP = 128;
        byte[] buffer = new byte[STEP];
        try (InputStream is = new FileInputStream(xlassFile);
             ByteArrayOutputStream os = new ByteArrayOutputStream(len)
        ) {
            for (int curLen = is.read(buffer); curLen != -1; curLen = is.read(buffer)) {
                for (int i = 0; i < buffer.length; i++) {
                    buffer[i] = (byte) (255 - buffer[i]);
                }
                os.write(buffer, 0, curLen);
            }
            content = os.toByteArray();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
        return content;
    }
}
