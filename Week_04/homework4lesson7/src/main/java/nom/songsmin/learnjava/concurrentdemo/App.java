/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package nom.songsmin.learnjava.concurrentdemo;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.FutureTask;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class App {
    static volatile int staticResult = -1;

    public static void main(String[] args) {

        long start = System.currentTimeMillis();
        // 在这里创建一个线程或线程池，

        // 异步执行 下面方法

//        int result = sum(); //这是得到的返回值
        int result = getResult();

        // 确保  拿到result 并输出
        System.out.println("异步计算结果为：" + result);

        System.out.println("使用时间：" + (System.currentTimeMillis() - start) + " ms");

        // 然后退出main线程
    }

    public static int getResult() {
        // 1. 判断是否获得合法值
//        new Thread(() -> staticResult = sum()).start();
//        while (true) {
//            if (staticResult != -1) break;
//        }
//        return staticResult;
        // 2. join
//        Thread t = new Thread(() -> staticResult = sum());
//        t.start();
//        try {
//            t.join();
//        } catch (InterruptedException e) {
//            e.printStackTrace();
//        }
//        return staticResult;
        // 3. wait/notify
//        Object o = new Object();
//        new Thread(() -> {
//            synchronized (o) {
//                staticResult = sum();
//                o.notify();
//            }
//        }).start();
//        try {
//            synchronized (o) {
//                o.wait();
//            }
//        } catch (InterruptedException e) {
//            e.printStackTrace();
//        }
//        return staticResult;
        // 4. Future
//        Future<Integer> future = Executors.newSingleThreadExecutor().submit(App::sum);
//        try {
//            return future.get();
//        } catch (InterruptedException | ExecutionException e) {
//            e.printStackTrace();
//        }
//        return 0;
        // 5. FutureTask
//        FutureTask<Integer> futureTask = new FutureTask<>(App::sum);
//        new Thread(futureTask).start();
//        try {
//            return futureTask.get();
//        } catch (InterruptedException | ExecutionException e) {
//            e.printStackTrace();
//        }
//        return 0;
        // 6. CompletableFuture
        return CompletableFuture.supplyAsync(App::sum).join();
    }

    static int sum() {
        return fibo(36);
    }

    private static int fibo(int a) {
        if (a < 2)
            return 1;
        return fibo(a - 1) + fibo(a - 2);
    }
}
